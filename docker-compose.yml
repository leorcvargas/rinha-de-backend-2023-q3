version: "3.5"
services:
  db:
    image: postgres
    hostname: db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: rinha
    ports:
      - "5432:5432"
    expose:
      - "5432"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "0.4GB"
    volumes:
      - postgres-db:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 15s
      timeout: 25s
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  api1:
    image: leorcvargas/rinha-go:main
    restart: always
    hostname: api1
    environment:
      - ENABLE_SONIC_JSON=1
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=rinha
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8080"
    deploy:
      resources:
        limits:
          cpus: "0.35"
          memory: "0.8GB"

  api2:
    image: leorcvargas/rinha-go:main
    restart: always
    hostname: api2
    environment:
      - ENABLE_SONIC_JSON=1
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=rinha
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8080"
    deploy:
      resources:
        limits:
          cpus: "0.35"
          memory: "0.8GB"

  nginx:
    image: nginx
    hostname: api
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "0.5GB"

  cache:
    hostname: cache
    image: redis:7-alpine
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "0.5GB"
    command: ["redis-server", "--save", '""', "--appendonly", "no"]

volumes:
  postgres-db:

networks:
  default:
    driver: bridge
